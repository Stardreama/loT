{"ast":null,"code":"// webSocketService.js\nlet socket;\nexport const createWebSocketConnection = onMessage => {\n  // 创建 WebSocket 连接\n  socket = new WebSocket('ws://localhost:5000');\n  socket.onopen = () => {\n    console.log('Connected to WebSocket server');\n    socket.send('Hello from the client!');\n  };\n  socket.onmessage = event => {\n    console.log(`Message from server: ${event.data}`);\n    if (onMessage) onMessage(event.data); // 调用传入的消息处理函数\n  };\n  socket.onclose = () => {\n    console.log('WebSocket connection closed');\n  };\n  return socket;\n};\nexport const sendWebSocketMessage = message => {\n  if (socket && socket.readyState === WebSocket.OPEN) {\n    socket.send(message);\n  } else {\n    console.error('WebSocket is not open. Unable to send message.');\n  }\n};\nexport const closeWebSocketConnection = () => {\n  if (socket) {\n    socket.close();\n  }\n};","map":{"version":3,"names":["socket","createWebSocketConnection","onMessage","WebSocket","onopen","console","log","send","onmessage","event","data","onclose","sendWebSocketMessage","message","readyState","OPEN","error","closeWebSocketConnection","close"],"sources":["D:/code/vscode/React/loT/frontend/src/services/webSocketService.js"],"sourcesContent":["// webSocketService.js\r\nlet socket;\r\n\r\nexport const createWebSocketConnection = (onMessage) => {\r\n    // 创建 WebSocket 连接\r\n    socket = new WebSocket('ws://localhost:5000');\r\n\r\n    socket.onopen = () => {\r\n        console.log('Connected to WebSocket server');\r\n        socket.send('Hello from the client!');\r\n    };\r\n\r\n    socket.onmessage = (event) => {\r\n        console.log(`Message from server: ${event.data}`);\r\n        if (onMessage) onMessage(event.data);  // 调用传入的消息处理函数\r\n    };\r\n\r\n    socket.onclose = () => {\r\n        console.log('WebSocket connection closed');\r\n    };\r\n\r\n    return socket;\r\n};\r\n\r\nexport const sendWebSocketMessage = (message) => {\r\n    if (socket && socket.readyState === WebSocket.OPEN) {\r\n        socket.send(message);\r\n    } else {\r\n        console.error('WebSocket is not open. Unable to send message.');\r\n    }\r\n};\r\n\r\nexport const closeWebSocketConnection = () => {\r\n    if (socket) {\r\n        socket.close();\r\n    }\r\n};\r\n"],"mappings":"AAAA;AACA,IAAIA,MAAM;AAEV,OAAO,MAAMC,yBAAyB,GAAIC,SAAS,IAAK;EACpD;EACAF,MAAM,GAAG,IAAIG,SAAS,CAAC,qBAAqB,CAAC;EAE7CH,MAAM,CAACI,MAAM,GAAG,MAAM;IAClBC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;IAC5CN,MAAM,CAACO,IAAI,CAAC,wBAAwB,CAAC;EACzC,CAAC;EAEDP,MAAM,CAACQ,SAAS,GAAIC,KAAK,IAAK;IAC1BJ,OAAO,CAACC,GAAG,CAAC,wBAAwBG,KAAK,CAACC,IAAI,EAAE,CAAC;IACjD,IAAIR,SAAS,EAAEA,SAAS,CAACO,KAAK,CAACC,IAAI,CAAC,CAAC,CAAE;EAC3C,CAAC;EAEDV,MAAM,CAACW,OAAO,GAAG,MAAM;IACnBN,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;EAC9C,CAAC;EAED,OAAON,MAAM;AACjB,CAAC;AAED,OAAO,MAAMY,oBAAoB,GAAIC,OAAO,IAAK;EAC7C,IAAIb,MAAM,IAAIA,MAAM,CAACc,UAAU,KAAKX,SAAS,CAACY,IAAI,EAAE;IAChDf,MAAM,CAACO,IAAI,CAACM,OAAO,CAAC;EACxB,CAAC,MAAM;IACHR,OAAO,CAACW,KAAK,CAAC,gDAAgD,CAAC;EACnE;AACJ,CAAC;AAED,OAAO,MAAMC,wBAAwB,GAAGA,CAAA,KAAM;EAC1C,IAAIjB,MAAM,EAAE;IACRA,MAAM,CAACkB,KAAK,CAAC,CAAC;EAClB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}